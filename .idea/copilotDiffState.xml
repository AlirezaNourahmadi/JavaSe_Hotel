<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/hotel/model/entity/Room.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/hotel/model/entity/Room.java" />
              <option name="originalContent" value="package hotel.model.entity;&#10;&#10;import com.google.gson.Gson;&#10;import hotel.model.entity.enums.RoomStatus;&#10;import hotel.model.entity.enums.RoomType;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;import lombok.experimental.SuperBuilder;&#10;&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@SuperBuilder&#10;public class Room {&#10;    private int roomId;&#10;    private RoomType type;&#10;    private RoomStatus status;&#10;    private int pricePerNight;&#10;    private int capacity;&#10;    private Branch branch;&#10;&#10;&#10;   @Override&#10;   public String toString() {&#10;       Gson gson = new Gson();&#10;       return gson.toJson(this);&#10;   }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package hotel.model.entity;&#10;&#10;import com.google.gson.Gson;&#10;import hotel.model.entity.enums.RoomStatus;&#10;import hotel.model.entity.enums.RoomType;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;import lombok.Setter;&#10;import lombok.experimental.SuperBuilder;&#10;&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@SuperBuilder&#10;public class Room {&#10;    private int roomId;&#10;    private RoomType type;&#10;    private RoomStatus status;&#10;    private int pricePerNight;&#10;    private int capacity;&#10;    private Branch branch;&#10;&#10;&#10;   @Override&#10;   public String toString() {&#10;       Gson gson = new Gson();&#10;       return gson.toJson(this);&#10;   }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/hotel/model/repository/HotelRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/hotel/model/repository/HotelRepository.java" />
              <option name="originalContent" value="package hotel.model.repository;&#10;&#10;import hotel.model.entity.Hotel;&#10;import hotel.model.tools.ConnectionProvider;&#10;import hotel.model.tools.HotelMapper;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;public class HotelRepository implements Repository&lt;Hotel, Integer&gt; ,AutoCloseable {&#10;    private PreparedStatement preparedStatement;&#10;    private final Connection connection;&#10;    private final HotelMapper hotelMapper = new HotelMapper();&#10;&#10;    public HotelRepository() throws Exception {&#10;        connection = ConnectionProvider.getProvider().getConnection();&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    @Override&#10;    public void save(Hotel hotel) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;INSERT INTO hotels (name, branch) VALUES (?, ?)&quot;&#10;        );&#10;        preparedStatement.setString(1, hotel.getName());&#10;        preparedStatement.execute();&#10;&#10;    }&#10;&#10;    @Override&#10;    public void edit(Hotel hotel) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;UPDATE hotels SET name=?, branch=? WHERE id=?&quot;&#10;        );&#10;&#10;    }&#10;&#10;    @Override&#10;    public void delete(Integer integer) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;DELETE FROM hotels WHERE id=?&quot;&#10;        );&#10;        preparedStatement.setInt(1, integer);&#10;        preparedStatement.execute();&#10;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Hotel&gt; findAll() throws Exception {&#10;        List&lt;Hotel&gt; hotels = Collections.emptyList();&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels&quot;&#10;        );&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        while (resultSet.next()) {&#10;            if (hotels.isEmpty()) {&#10;                hotels = new java.util.ArrayList&lt;&gt;();&#10;            }&#10;            hotels.add(hotelMapper.hotelMapper(resultSet));&#10;        }&#10;        return hotels;&#10;    }&#10;&#10;    @Override&#10;    public Hotel findById(Integer integer) throws Exception {&#10;        Hotel hotel = null;&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels WHERE id=?&quot;&#10;        );&#10;        preparedStatement.setInt(1, integer);&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        if (resultSet.next()) {&#10;            hotel = hotelMapper.hotelMapper(resultSet);&#10;        }&#10;        return hotel;&#10;    }&#10;    public List&lt;Hotel&gt; findByName(String name) throws Exception {&#10;        List&lt;Hotel&gt; hotels = new java.util.ArrayList&lt;&gt;();&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels WHERE name=?&quot;&#10;        );&#10;        preparedStatement.setString(1, name);&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        while (resultSet.next()) {&#10;            hotels.add(hotelMapper.hotelMapper(resultSet));&#10;        }&#10;        return hotels;&#10;    }&#10;&#10;    @Override&#10;    public void close() throws Exception {&#10;        preparedStatement.close();&#10;        connection.close();&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package hotel.model.repository;&#10;&#10;import hotel.model.entity.Hotel;&#10;import hotel.model.tools.ConnectionProvider;&#10;import hotel.model.tools.HotelMapper;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;public class HotelRepository implements Repository&lt;Hotel, Integer&gt; ,AutoCloseable {&#10;    private PreparedStatement preparedStatement;&#10;    private final Connection connection;&#10;    private final HotelMapper hotelMapper = new HotelMapper();&#10;&#10;    public HotelRepository() throws Exception {&#10;        connection = ConnectionProvider.getProvider().getConnection();&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    @Override&#10;    public void save(Hotel hotel) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;INSERT INTO hotels (name, branch) VALUES (?, ?)&quot;&#10;        );&#10;        preparedStatement.setString(1, hotel.getName());&#10;        preparedStatement.execute();&#10;&#10;    }&#10;&#10;    @Override&#10;    public void edit(Hotel hotel) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;UPDATE hotels SET name=?, branch=? WHERE id=?&quot;&#10;        );&#10;&#10;    }&#10;&#10;    @Override&#10;    public void delete(Integer integer) throws Exception {&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;DELETE FROM hotels WHERE id=?&quot;&#10;        );&#10;        preparedStatement.setInt(1, integer);&#10;        preparedStatement.execute();&#10;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Hotel&gt; findAll() throws Exception {&#10;        List&lt;Hotel&gt; hotels = Collections.emptyList();&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels&quot;&#10;        );&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        while (resultSet.next()) {&#10;            if (hotels.isEmpty()) {&#10;                hotels = new java.util.ArrayList&lt;&gt;();&#10;            }&#10;            hotels.add(hotelMapper.hotelMapper(resultSet));&#10;        }&#10;        return hotels;&#10;    }&#10;&#10;    @Override&#10;    public Hotel findById(Integer integer) throws Exception {&#10;        Hotel hotel = null;&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels WHERE id=?&quot;&#10;        );&#10;        preparedStatement.setInt(1, integer);&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        if (resultSet.next()) {&#10;            hotel = hotelMapper.hotelMapper(resultSet);&#10;        }&#10;        return hotel;&#10;    }&#10;    public List&lt;Hotel&gt; findByName(String name) throws Exception {&#10;        List&lt;Hotel&gt; hotels = new java.util.ArrayList&lt;&gt;();&#10;        preparedStatement = connection.prepareStatement(&#10;                &quot;SELECT * FROM hotels WHERE name=?&quot;&#10;        );&#10;        preparedStatement.setString(1, name);&#10;        ResultSet resultSet = preparedStatement.executeQuery();&#10;        while (resultSet.next()) {&#10;            hotels.add(hotelMapper.hotelMapper(resultSet));&#10;        }&#10;        return hotels;&#10;    }&#10;&#10;    @Override&#10;    public void close() throws Exception {&#10;        preparedStatement.close();&#10;        connection.close();&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>